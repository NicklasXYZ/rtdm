# Generated by Django 3.1.2 on 2021-02-08 04:07

import uuid

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataPoint",
            fields=[
                (
                    "uid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="The unique identifier for the datapoint.",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="datapoint uid",
                    ),
                ),
                (
                    "internal_timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The internally set timestamp.",
                        verbose_name="internal timestamp",
                    ),
                ),
                (
                    "external_timestamp",
                    models.DateTimeField(
                        help_text="The externally given timestamp.",
                        null=True,
                        verbose_name="external timestamp",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="The latitude of the location in degrees.",
                        verbose_name="latitude",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="The longitude of the location in degrees.",
                        verbose_name="longitude",
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Point",
                "verbose_name_plural": "Data Points",
                "ordering": ["external_timestamp"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomBaseUser",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "uid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="The unique identifier of the user.",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="user uid",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="The email of the user.",
                        max_length=250,
                        unique=True,
                        verbose_name="email",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="The password of the user.",
                        max_length=250,
                        null=True,
                        verbose_name="password",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date the user joined.",
                        verbose_name="join date",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Specifies whether the user is an administrator.",
                        verbose_name="is admin",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Specifies whether the user is a superuser.",
                        verbose_name="is superuser",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Specifies whether the user is a part of the staff.",
                        verbose_name="is staff",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom Base User",
                "verbose_name_plural": "Custom Base Users",
                "ordering": ["date_joined"],
                "abstract": False,
            },
        ),
    ]
